module fp(output reg [7:0] DATA_R, DATA_G, DATA_B, output reg [3:0] A_count, output reg a, b, c, d, e, f, g,
input [3:0] punch_1, punch_2, input CLK);
	divfreq F0(CLK, CLK_div);	//除頻器
	
	//玩家1出拳顯示在8*8全彩矩陣上
	always@(punch_1, punch_2)
		begin
			if(punch_1 == 4'b0001 && punch_2 == 4'b0001) DATA_R = 8'b11011110;

			else if(punch_1 == 4'b0001 && punch_2 == 4'b0010) 
				begin
					DATA_R = 8'b11011111;
					DATA_G = 8'b11111101;
				end
			else if(punch_1 == 4'b0001 && punch_2 == 4'b0100) 
				begin
					DATA_R = 8'b11011111;
					DATA_B = 8'b11111011;
				end
			else if(punch_1 == 4'b0010 && punch_2 == 4'b0001) 
				begin
					DATA_G = 8'b10111111;
					DATA_R = 8'b11111110;
				end
			else if(punch_1 == 4'b0010 && punch_2 == 4'b0010) DATA_G = 8'b10111101;
			else if(punch_1 == 4'b0010 && punch_2 == 4'b0100) 
				begin
					DATA_G = 8'b10111111;
					DATA_B = 8'b11111011;
				end
			else if(punch_1 == 4'b0100 && punch_2 == 4'b0001) 
				begin
					DATA_B = 8'b01111111;
					DATA_R = 8'b11111110;
				end
			else if(punch_1 == 4'b0100 && punch_2 == 4'b0010) 
				begin
					DATA_B = 8'b01111111;
					DATA_G = 8'b11111101;
				end
			else if(punch_1 == 4'b0100 && punch_2 == 4'b0100) DATA_B = 8'b01111011;

			//沒出拳不顯示
			else
				begin
					DATA_R = 8'b11111111;
					DATA_G = 8'b11111111;
					DATA_B = 8'b11111111;
				end
		end
		
	//8*8 matrix enable
	always@(posedge CLK_div)
		if(Clear) A_count <= 4'b0000;
		else A_count <= A_count + 1'b1;
		
endmodule

//除頻器
module divfreq(input CLK, output reg CLK_div);
	reg [24:0] Count;
	always@(posedge CLK)
		begin
			if(Count > 25000)
				begin
					Count <= 25'b0;
					CLK_div <= ~CLK_div;
				end
			else
				Count <= Count + 1'b1;
			end
endmodule
